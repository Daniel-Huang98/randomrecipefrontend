{"version":3,"sources":["components/image.js","components/button.js","components/ingredients.js","components/instructions.js","components/information.js","App.js","serviceWorker.js","index.js"],"names":["Image","imageURL","this","props","concat","console","log","className","src","alt","name","React","Component","Button","onclick","onClick","text","Ingredients","IngredientsList","undefined","ingredients","listItems","itr","length","push","Instructions","instructionsList","instructions","Information","category","region","id","App","state","recipe","data","hasRecipe","getRecipe","bind","fetch","method","mode","then","json","JSON","parse","recipedata","setState","catch","error","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7b526e9e.chunk.js","sourcesContent":["import React from 'react';\nimport './style/image.css'\n\n\nclass Image extends React.Component{\n    render(){\n        var imageURL = this.props.imageURL\n        var serverURL = \"https://recipeimages.herokuapp.com/\"\n        imageURL = serverURL.concat(imageURL)   \n        console.log(imageURL)\n        if(this.props.imageURL !== \"\"){\n            return(\n                <div className=\"image\">\n                    <img src={imageURL} alt={this.props.name}/>\n                </div>\n            );\n        } else {\n            return(<div className=\"image\"></div>)\n        }\n        \n    }\n}\n\nexport default Image;","import React from 'react';\nimport './style/button.css'\n\n\nclass Button extends React.Component{\n    render(){\n        var onclick = this.props.onclick  \n        return(\n            <div className=\"button\" onClick={onclick}>\n                <p>{this.props.text}</p>\n            </div>\n        );\n        \n        \n    }\n}\n\nexport default Button;","import React from 'react';\nimport './style/ingredients.css'\n\n\nclass Ingredients extends React.Component{\n    render(){\n        \n        var IngredientsList = []\n        if(this.props.ingredients !== undefined){\n            IngredientsList = this.props.ingredients;\n        }\n        var listItems = []\n        for(var itr=0; itr<IngredientsList.length; itr++){\n            listItems.push(<li>{IngredientsList[itr][0]} {IngredientsList[itr][1]}</li>)\n        }\n        return(\n            <div className=\"ingredients\">\n                <h3>Ingredients</h3>\n                <ul>\n                    {listItems}\n                </ul>\n            </div>\n        );\n        \n        \n    }\n}\n\nexport default Ingredients;","import React from 'react';\nimport './style/instructions.css'\n\n\nclass Instructions extends React.Component{\n    render(){\n        var instructionsList = [];\n        var instructions = this.props.instructions;\n        if(instructions !== undefined){\n            for(var itr=0; itr<instructions.length; itr++){\n                if(instructions[itr] !== \"\"){\n                    instructionsList.push(<li>{instructions[itr]}</li>)\n                }\n            }\n        }\n        return(\n            <div className=\"instructions\" onClick={onclick}>\n                <h3>Instructions</h3>\n                <ol>{instructionsList}</ol>\n            </div>\n        );\n        \n        \n    }\n}\n\nexport default Instructions;","import React from 'react';\nimport './style/information.css'\n\n\nclass Information extends React.Component{\n    render(){\n        var name = this.props.name\n        var category = this.props.category\n        var region = this.props.region\n        return(\n            <div className=\"information\" >\n                <h2>Recipe: </h2>\n                <p id=\"recipename\">{name}</p>\n                <h2>Category: </h2>\n                <p>{category}</p>\n                <h2>Region: </h2>\n                <p>{region}</p>\n            </div>\n        );\n        \n        \n    }\n}\n\nexport default Information;","import React from 'react';\nimport './App.css';\nimport Image from './components/image.js'\nimport Button from './components/button.js'\nimport Ingredients from './components/ingredients.js'\nimport Instructions from './components/instructions.js'\nimport Information from './components/information.js'\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      recipe:{\n        name: \"\",\n        category: \"\",\n        region: \"\",\n        ingredients: [],\n        instructions:[],\n        imageURL:\"\",\n      },\n      data: \"\" ,\n      hasRecipe:0\n    };\n    this.getRecipe = this.getRecipe.bind(this)\n  }\n  getRecipe(){\n    fetch(\"https://randomrecipeapi.herokuapp.com/randomrecipe\",{method: 'GET', mode:'cors'}).then(data=>data.json()).then(json=>JSON.parse(json.data)).then(recipedata=>this.setState(\n      {\n        recipe:{\n          name: recipedata.name,\n          category: recipedata.category,\n          region: recipedata.region,\n          ingredients: recipedata.ingredients,\n          instructions:recipedata.instructions,\n          imageURL:recipedata.imageURL\n        },\n        data:recipedata.ingredients\n      }\n    )).catch(error=>console.log(error));\n  }\n  componentDidMount(){\n    if(this.state.hasRecipe === 0){\n      this.getRecipe();\n    }\n  }\n  render(){\n    \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Show Me a Recipe</h1>\n          <Information name={this.state.recipe.name} category={this.state.recipe.category} region={this.state.recipe.region}/>\n          <Image imageURL={this.state.recipe.imageURL} name={this.state.recipe.name}/>\n          <Button onclick={this.getRecipe} text={\"generate\"}/>\n          <Ingredients ingredients={this.state.recipe.ingredients}/>\n          <Instructions instructions={this.state.recipe.instructions}/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}